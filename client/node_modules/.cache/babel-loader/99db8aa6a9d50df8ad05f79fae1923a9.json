{"ast":null,"code":"import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { ActionTypes } from \"actions/video/type\";\nimport { AppConfig } from \"configurations\";\nimport { parseYoutubeId } from \"utils/helpers\";\nimport { request } from \"utils/client\";\n/**\n * Fetch Video\n */\n\nexport function* fetch(param) {\n  try {\n    const payload = {\n      method: \"GET\"\n    };\n    const paramPayload = param.payload;\n    const url = `/videos?page_index=${paramPayload.page_index}`;\n    const response = yield call(request, url, payload);\n    yield put({\n      type: ActionTypes.VIDEO_FETCH_SUCCESS,\n      payload: response\n    });\n  } catch (err) {\n    /* istanbul ignore next */\n    yield put({\n      type: ActionTypes.VIDEO_FETCH_FAILURE,\n      payload: err\n    });\n  }\n}\n/**\n * Fetch Video\n */\n\nexport function* share(param) {\n  try {\n    const {\n      payload\n    } = param;\n    const {\n      videoUrl,\n      userToken\n    } = payload;\n    const {\n      youtubeAPIKey,\n      youtubeAPIURL\n    } = AppConfig;\n    const requestPayload = {\n      method: \"GET\"\n    };\n    const videoId = parseYoutubeId(videoUrl);\n    const url = `${youtubeAPIURL}?part=snippet&id=${videoId}&key=${youtubeAPIKey}`;\n    const response = yield call(request, url, requestPayload);\n    const {\n      items\n    } = response;\n    const {\n      snippet\n    } = items[0];\n    const {\n      title,\n      description\n    } = snippet;\n    const sharingPayload = {\n      title: title,\n      description: description,\n      url: videoUrl\n    };\n    const headers = {\n      Authorization: `Bearer ${userToken}`\n    };\n    const requestSharingPayload = {\n      method: \"POST\",\n      payload: sharingPayload,\n      headers: headers,\n      withCredentials: true\n    };\n    yield call(request, \"/videos\", requestSharingPayload);\n    yield put({\n      type: ActionTypes.VIDEO_SHARING_SUCCESS\n    });\n  } catch (err) {\n    /* istanbul ignore next */\n    yield put({\n      type: ActionTypes.VIDEO_SHARING_FAILURE,\n      payload: err\n    });\n  }\n}\n/**\n * Video Sagas\n */\n\nexport default function* root() {\n  yield all([takeLatest(ActionTypes.VIDEO_FETCH, fetch)]);\n  yield all([takeLatest(ActionTypes.VIDEO_SHARING, share)]);\n}","map":{"version":3,"sources":["/Users/nhunam/Desktop/Java/remitano/remitano/video-sharing-react/src/sagas/video.js"],"names":["all","call","put","takeLatest","ActionTypes","AppConfig","parseYoutubeId","request","fetch","param","payload","method","paramPayload","url","page_index","response","type","VIDEO_FETCH_SUCCESS","err","VIDEO_FETCH_FAILURE","share","videoUrl","userToken","youtubeAPIKey","youtubeAPIURL","requestPayload","videoId","items","snippet","title","description","sharingPayload","headers","Authorization","requestSharingPayload","withCredentials","VIDEO_SHARING_SUCCESS","VIDEO_SHARING_FAILURE","root","VIDEO_FETCH","VIDEO_SHARING"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\n\nimport { ActionTypes } from \"actions/video/type\";\nimport { AppConfig } from \"configurations\";\nimport { parseYoutubeId } from \"utils/helpers\";\nimport { request } from \"utils/client\";\n\n/**\n * Fetch Video\n */\nexport function* fetch(param) {\n  try {\n    const payload = {\n      method: \"GET\"\n    };\n    const paramPayload = param.payload;\n    const url = `/videos?page_index=${paramPayload.page_index}`;\n    const response = yield call(request, url, payload);\n\n    yield put({\n      type: ActionTypes.VIDEO_FETCH_SUCCESS,\n      payload: response\n    });\n  } catch (err) {\n    /* istanbul ignore next */\n    yield put({\n      type: ActionTypes.VIDEO_FETCH_FAILURE,\n      payload: err\n    });\n  }\n}\n\n/**\n * Fetch Video\n */\nexport function* share(param) {\n  try {\n    const { payload } = param;\n    const { videoUrl, userToken } = payload;\n    const { youtubeAPIKey, youtubeAPIURL } = AppConfig;\n    const requestPayload = {\n      method: \"GET\"\n    };\n    const videoId = parseYoutubeId(videoUrl);\n\n    const url = `${youtubeAPIURL}?part=snippet&id=${videoId}&key=${youtubeAPIKey}`;\n    const response = yield call(request, url, requestPayload);\n\n    const { items } = response;\n    const { snippet } = items[0];\n    const { title, description } = snippet;\n\n    const sharingPayload = {\n      title: title,\n      description: description,\n      url: videoUrl\n    };\n    const headers = { Authorization: `Bearer ${userToken}` };\n    const requestSharingPayload = {\n      method: \"POST\",\n      payload: sharingPayload,\n      headers: headers,\n      withCredentials: true\n    };\n    yield call(request, \"/videos\", requestSharingPayload);\n\n    yield put({\n      type: ActionTypes.VIDEO_SHARING_SUCCESS\n    });\n  } catch (err) {\n    /* istanbul ignore next */\n    yield put({\n      type: ActionTypes.VIDEO_SHARING_FAILURE,\n      payload: err\n    });\n  }\n}\n\n/**\n * Video Sagas\n */\nexport default function* root() {\n  yield all([takeLatest(ActionTypes.VIDEO_FETCH, fetch)]);\n  yield all([takeLatest(ActionTypes.VIDEO_SHARING, share)]);\n}\n"]},"metadata":{},"sourceType":"module"}