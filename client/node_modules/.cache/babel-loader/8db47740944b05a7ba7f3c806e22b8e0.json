{"ast":null,"code":"import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\nimport middleware, { sagaMiddleware } from \"./middleware\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport rootReducer from \"reducers\";\nimport rootSaga from \"sagas\";\nimport storage from \"redux-persist/lib/storage\";\nconst reducer = persistReducer({\n  key: \"rrsb\",\n  // key is required\n  storage,\n  // storage is now required\n  whitelist: [\"app\", \"user\"]\n}, combineReducers({ ...rootReducer\n}));\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n/* istanbul ignore next */\n\nconst configStore = (initialState = {}) => {\n  const store = createStore(reducer, initialState, composeEnhancer(applyMiddleware(...middleware)));\n  sagaMiddleware.run(rootSaga);\n\n  if (module.hot) {\n    module.hot.accept(\"reducers\", () => {\n      store.replaceReducer(require(\"reducers/index\").default);\n    });\n  }\n\n  return {\n    persistor: persistStore(store),\n    store\n  };\n};\n\nconst {\n  store,\n  persistor\n} = configStore();\nglobal.store = store;\nexport { store, persistor };","map":{"version":3,"sources":["/Users/nhunam/Desktop/Java/remitano/remitano/video-sharing-react/src/store/index.js"],"names":["applyMiddleware","combineReducers","compose","createStore","middleware","sagaMiddleware","persistReducer","persistStore","rootReducer","rootSaga","storage","reducer","key","whitelist","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","configStore","initialState","store","run","module","hot","accept","replaceReducer","require","default","persistor","global"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,OAA3C,EAAoDC,WAApD,QAAuE,OAAvE;AACA,OAAOC,UAAP,IAAqBC,cAArB,QAA2C,cAA3C;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,eAA7C;AAEA,OAAOC,WAAP,MAAwB,UAAxB;AACA,OAAOC,QAAP,MAAqB,OAArB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,MAAMC,OAAO,GAAGL,cAAc,CAC5B;AACEM,EAAAA,GAAG,EAAE,MADP;AACe;AACbF,EAAAA,OAFF;AAEW;AACTG,EAAAA,SAAS,EAAE,CAAC,KAAD,EAAQ,MAAR;AAHb,CAD4B,EAM5BZ,eAAe,CAAC,EACd,GAAGO;AADW,CAAD,CANa,CAA9B;AAWA,MAAMM,eAAe,GAAGC,MAAM,CAACC,oCAAP,IAA+Cd,OAAvE;AAEA;;AACA,MAAMe,WAAW,GAAG,CAACC,YAAY,GAAG,EAAhB,KAAuB;AACzC,QAAMC,KAAK,GAAGhB,WAAW,CACvBQ,OADuB,EAEvBO,YAFuB,EAGvBJ,eAAe,CAACd,eAAe,CAAC,GAAGI,UAAJ,CAAhB,CAHQ,CAAzB;AAMAC,EAAAA,cAAc,CAACe,GAAf,CAAmBX,QAAnB;;AAEA,MAAIY,MAAM,CAACC,GAAX,EAAgB;AACdD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,UAAlB,EAA8B,MAAM;AAClCJ,MAAAA,KAAK,CAACK,cAAN,CAAqBC,OAAO,CAAC,gBAAD,CAAP,CAA0BC,OAA/C;AACD,KAFD;AAGD;;AAED,SAAO;AACLC,IAAAA,SAAS,EAAEpB,YAAY,CAACY,KAAD,CADlB;AAELA,IAAAA;AAFK,GAAP;AAID,CAnBD;;AAqBA,MAAM;AAAEA,EAAAA,KAAF;AAASQ,EAAAA;AAAT,IAAuBV,WAAW,EAAxC;AAEAW,MAAM,CAACT,KAAP,GAAeA,KAAf;AAEA,SAASA,KAAT,EAAgBQ,SAAhB","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\nimport middleware, { sagaMiddleware } from \"./middleware\";\nimport { persistReducer, persistStore } from \"redux-persist\";\n\nimport rootReducer from \"reducers\";\nimport rootSaga from \"sagas\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst reducer = persistReducer(\n  {\n    key: \"rrsb\", // key is required\n    storage, // storage is now required\n    whitelist: [\"app\", \"user\"]\n  },\n  combineReducers({\n    ...rootReducer\n  })\n);\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n/* istanbul ignore next */\nconst configStore = (initialState = {}) => {\n  const store = createStore(\n    reducer,\n    initialState,\n    composeEnhancer(applyMiddleware(...middleware))\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  if (module.hot) {\n    module.hot.accept(\"reducers\", () => {\n      store.replaceReducer(require(\"reducers/index\").default);\n    });\n  }\n\n  return {\n    persistor: persistStore(store),\n    store\n  };\n};\n\nconst { store, persistor } = configStore();\n\nglobal.store = store;\n\nexport { store, persistor };\n"]},"metadata":{},"sourceType":"module"}