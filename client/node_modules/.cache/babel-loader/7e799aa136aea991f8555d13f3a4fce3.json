{"ast":null,"code":"import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { ActionTypes } from \"actions/user/type\";\nimport jwt_decode from \"jwt-decode\";\nimport { request } from \"utils/client\";\n/**\n * Login\n */\n\nexport function* authenticate(param) {\n  try {\n    const payload = {\n      method: \"POST\",\n      ...param\n    };\n    const response = yield call(request, \"/token\", payload);\n    const {\n      token\n    } = response;\n    const user = jwt_decode(token);\n    yield put({\n      type: ActionTypes.USER_LOGIN_SUCCESS,\n      payload: {\n        token: token,\n        email: user.email,\n        id: user.id\n      }\n    });\n  } catch (err) {\n    /* istanbul ignore next */\n    yield put({\n      type: ActionTypes.USER_LOGIN_FAILURE,\n      payload: err\n    });\n  }\n}\n/**\n * create\n */\n\nexport function* create(param) {\n  const {\n    email,\n    password\n  } = param.payload;\n\n  try {\n    const payload = {\n      method: \"POST\",\n      ...param\n    };\n    yield call(request, \"/users\", payload);\n    yield put({\n      type: ActionTypes.USER_LOGIN,\n      payload: {\n        email: email,\n        password: password\n      }\n    });\n  } catch (err) {\n    /* istanbul ignore next */\n    yield put({\n      type: ActionTypes.USER_LOGIN,\n      payload: {\n        email: email,\n        password: password\n      }\n    });\n  }\n}\n/**\n * Logout\n */\n\nexport function* logout() {\n  yield put({\n    type: ActionTypes.USER_LOGOUT_SUCCESS\n  });\n}\n/**\n * User Sagas\n */\n\nexport default function* root() {\n  yield all([takeLatest(ActionTypes.USER_LOGIN, authenticate), takeLatest(ActionTypes.USER_LOGOUT, logout), takeLatest(ActionTypes.USER_CREATE, create)]);\n}","map":{"version":3,"sources":["/Users/nhunam/Desktop/Java/remitano/remitano/video-sharing-react/src/sagas/user.js"],"names":["all","call","put","takeLatest","ActionTypes","jwt_decode","request","authenticate","param","payload","method","response","token","user","type","USER_LOGIN_SUCCESS","email","id","err","USER_LOGIN_FAILURE","create","password","USER_LOGIN","logout","USER_LOGOUT_SUCCESS","root","USER_LOGOUT","USER_CREATE"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AAEA,SAASC,WAAT,QAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA;AACA;AACA;;AACA,OAAO,UAAUC,YAAV,CAAuBC,KAAvB,EAA8B;AACnC,MAAI;AACF,UAAMC,OAAO,GAAG;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkB,SAAGF;AAArB,KAAhB;AACA,UAAMG,QAAQ,GAAG,MAAMV,IAAI,CAACK,OAAD,EAAU,QAAV,EAAoBG,OAApB,CAA3B;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAYD,QAAlB;AACA,UAAME,IAAI,GAAGR,UAAU,CAACO,KAAD,CAAvB;AAEA,UAAMV,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEV,WAAW,CAACW,kBADV;AAERN,MAAAA,OAAO,EAAE;AAAEG,QAAAA,KAAK,EAAEA,KAAT;AAAgBI,QAAAA,KAAK,EAAEH,IAAI,CAACG,KAA5B;AAAmCC,QAAAA,EAAE,EAAEJ,IAAI,CAACI;AAA5C;AAFD,KAAD,CAAT;AAID,GAVD,CAUE,OAAOC,GAAP,EAAY;AACZ;AACA,UAAMhB,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEV,WAAW,CAACe,kBADV;AAERV,MAAAA,OAAO,EAAES;AAFD,KAAD,CAAT;AAID;AACF;AAED;AACA;AACA;;AACA,OAAO,UAAUE,MAAV,CAAiBZ,KAAjB,EAAwB;AAC7B,QAAM;AAAEQ,IAAAA,KAAF;AAASK,IAAAA;AAAT,MAAsBb,KAAK,CAACC,OAAlC;;AACA,MAAI;AACF,UAAMA,OAAO,GAAG;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkB,SAAGF;AAArB,KAAhB;AACA,UAAMP,IAAI,CAACK,OAAD,EAAU,QAAV,EAAoBG,OAApB,CAAV;AAEA,UAAMP,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEV,WAAW,CAACkB,UADV;AAERb,MAAAA,OAAO,EAAE;AAAEO,QAAAA,KAAK,EAAEA,KAAT;AAAgBK,QAAAA,QAAQ,EAAEA;AAA1B;AAFD,KAAD,CAAT;AAID,GARD,CAQE,OAAOH,GAAP,EAAY;AACZ;AACA,UAAMhB,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEV,WAAW,CAACkB,UADV;AAERb,MAAAA,OAAO,EAAE;AAAEO,QAAAA,KAAK,EAAEA,KAAT;AAAgBK,QAAAA,QAAQ,EAAEA;AAA1B;AAFD,KAAD,CAAT;AAID;AACF;AAED;AACA;AACA;;AACA,OAAO,UAAUE,MAAV,GAAmB;AACxB,QAAMrB,GAAG,CAAC;AACRY,IAAAA,IAAI,EAAEV,WAAW,CAACoB;AADV,GAAD,CAAT;AAGD;AAED;AACA;AACA;;AACA,eAAe,UAAUC,IAAV,GAAiB;AAC9B,QAAMzB,GAAG,CAAC,CACRG,UAAU,CAACC,WAAW,CAACkB,UAAb,EAAyBf,YAAzB,CADF,EAERJ,UAAU,CAACC,WAAW,CAACsB,WAAb,EAA0BH,MAA1B,CAFF,EAGRpB,UAAU,CAACC,WAAW,CAACuB,WAAb,EAA0BP,MAA1B,CAHF,CAAD,CAAT;AAKD","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\n\nimport { ActionTypes } from \"actions/user/type\";\nimport jwt_decode from \"jwt-decode\";\nimport { request } from \"utils/client\";\n\n/**\n * Login\n */\nexport function* authenticate(param) {\n  try {\n    const payload = { method: \"POST\", ...param };\n    const response = yield call(request, \"/token\", payload);\n    const { token } = response;\n    const user = jwt_decode(token);\n\n    yield put({\n      type: ActionTypes.USER_LOGIN_SUCCESS,\n      payload: { token: token, email: user.email, id: user.id }\n    });\n  } catch (err) {\n    /* istanbul ignore next */\n    yield put({\n      type: ActionTypes.USER_LOGIN_FAILURE,\n      payload: err\n    });\n  }\n}\n\n/**\n * create\n */\nexport function* create(param) {\n  const { email, password } = param.payload;\n  try {\n    const payload = { method: \"POST\", ...param };\n    yield call(request, \"/users\", payload);\n\n    yield put({\n      type: ActionTypes.USER_LOGIN,\n      payload: { email: email, password: password }\n    });\n  } catch (err) {\n    /* istanbul ignore next */\n    yield put({\n      type: ActionTypes.USER_LOGIN,\n      payload: { email: email, password: password }\n    });\n  }\n}\n\n/**\n * Logout\n */\nexport function* logout() {\n  yield put({\n    type: ActionTypes.USER_LOGOUT_SUCCESS\n  });\n}\n\n/**\n * User Sagas\n */\nexport default function* root() {\n  yield all([\n    takeLatest(ActionTypes.USER_LOGIN, authenticate),\n    takeLatest(ActionTypes.USER_LOGOUT, logout),\n    takeLatest(ActionTypes.USER_CREATE, create)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}