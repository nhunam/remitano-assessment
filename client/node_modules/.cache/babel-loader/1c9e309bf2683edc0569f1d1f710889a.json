{"ast":null,"code":"import _toConsumableArray from\"/Users/nhunam/Desktop/Java/remitano/remitano/video-sharing-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/nhunam/Desktop/Java/remitano/remitano/video-sharing-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{applyMiddleware,combineReducers,compose,createStore}from\"redux\";import middleware,{sagaMiddleware}from\"./middleware\";import{persistReducer,persistStore}from\"redux-persist\";import rootReducer from\"reducers\";import rootSaga from\"sagas\";import storage from\"redux-persist/lib/storage\";var reducer=persistReducer({key:\"rrsb\",// key is required\nstorage:storage,// storage is now required\nwhitelist:[\"app\",\"user\"]},combineReducers(_objectSpread({},rootReducer)));var composeEnhancer=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||compose;/* istanbul ignore next */var configStore=function configStore(){var initialState=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var store=createStore(reducer,initialState,composeEnhancer(applyMiddleware.apply(void 0,_toConsumableArray(middleware))));sagaMiddleware.run(rootSaga);if(module.hot){module.hot.accept(\"reducers\",function(){store.replaceReducer(require(\"reducers/index\").default);});}return{persistor:persistStore(store),store:store};};var _configStore=configStore(),store=_configStore.store,persistor=_configStore.persistor;global.store=store;export{store,persistor};","map":{"version":3,"sources":["/Users/nhunam/Desktop/Java/remitano/remitano/video-sharing-react/src/store/index.js"],"names":["applyMiddleware","combineReducers","compose","createStore","middleware","sagaMiddleware","persistReducer","persistStore","rootReducer","rootSaga","storage","reducer","key","whitelist","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","configStore","initialState","store","run","module","hot","accept","replaceReducer","require","default","persistor","global"],"mappings":"qXAAA,OAASA,eAAT,CAA0BC,eAA1B,CAA2CC,OAA3C,CAAoDC,WAApD,KAAuE,OAAvE,CACA,MAAOC,CAAAA,UAAP,EAAqBC,cAArB,KAA2C,cAA3C,CACA,OAASC,cAAT,CAAyBC,YAAzB,KAA6C,eAA7C,CAEA,MAAOC,CAAAA,WAAP,KAAwB,UAAxB,CACA,MAAOC,CAAAA,QAAP,KAAqB,OAArB,CACA,MAAOC,CAAAA,OAAP,KAAoB,2BAApB,CAEA,GAAMC,CAAAA,OAAO,CAAGL,cAAc,CAC5B,CACEM,GAAG,CAAE,MADP,CACe;AACbF,OAAO,CAAPA,OAFF,CAEW;AACTG,SAAS,CAAE,CAAC,KAAD,CAAQ,MAAR,CAHb,CAD4B,CAM5BZ,eAAe,kBACVO,WADU,EANa,CAA9B,CAWA,GAAMM,CAAAA,eAAe,CAAGC,MAAM,CAACC,oCAAP,EAA+Cd,OAAvE,CAEA,0BACA,GAAMe,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAuB,IAAtBC,CAAAA,YAAsB,2DAAP,EAAO,CACzC,GAAMC,CAAAA,KAAK,CAAGhB,WAAW,CACvBQ,OADuB,CAEvBO,YAFuB,CAGvBJ,eAAe,CAACd,eAAe,MAAf,2BAAmBI,UAAnB,EAAD,CAHQ,CAAzB,CAMAC,cAAc,CAACe,GAAf,CAAmBX,QAAnB,EAEA,GAAIY,MAAM,CAACC,GAAX,CAAgB,CACdD,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,UAAlB,CAA8B,UAAM,CAClCJ,KAAK,CAACK,cAAN,CAAqBC,OAAO,CAAC,gBAAD,CAAP,CAA0BC,OAA/C,EACD,CAFD,EAGD,CAED,MAAO,CACLC,SAAS,CAAEpB,YAAY,CAACY,KAAD,CADlB,CAELA,KAAK,CAALA,KAFK,CAAP,CAID,CAnBD,C,iBAqB6BF,WAAW,E,CAAhCE,K,cAAAA,K,CAAOQ,S,cAAAA,S,CAEfC,MAAM,CAACT,KAAP,CAAeA,KAAf,CAEA,OAASA,KAAT,CAAgBQ,SAAhB","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\nimport middleware, { sagaMiddleware } from \"./middleware\";\nimport { persistReducer, persistStore } from \"redux-persist\";\n\nimport rootReducer from \"reducers\";\nimport rootSaga from \"sagas\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst reducer = persistReducer(\n  {\n    key: \"rrsb\", // key is required\n    storage, // storage is now required\n    whitelist: [\"app\", \"user\"]\n  },\n  combineReducers({\n    ...rootReducer\n  })\n);\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n/* istanbul ignore next */\nconst configStore = (initialState = {}) => {\n  const store = createStore(\n    reducer,\n    initialState,\n    composeEnhancer(applyMiddleware(...middleware))\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  if (module.hot) {\n    module.hot.accept(\"reducers\", () => {\n      store.replaceReducer(require(\"reducers/index\").default);\n    });\n  }\n\n  return {\n    persistor: persistStore(store),\n    store\n  };\n};\n\nconst { store, persistor } = configStore();\n\nglobal.store = store;\n\nexport { store, persistor };\n"]},"metadata":{},"sourceType":"module"}