{"ast":null,"code":"/**\n * Client\n * @module Client\n */\nimport axios, { AxiosRequestConfig } from \"axios\";\nexport class ServerError extends Error {\n  constructor(message) {\n    super(message);\n    Error.captureStackTrace(this, ServerError);\n    this.name = \"ServerError\";\n    return this;\n  }\n\n}\nexport function parseError(error) {\n  return error || \"Something went wrong\";\n}\n/**\n * Fetch data\n *\n * @param {string} url\n * @param {Object} options\n * @param {string} [options.method] - Request method ( GET, POST, PUT, ... ).\n * @param {string} [options.payload] - Request body.\n * @param {Object} [options.headers]\n *\n * @returns {Promise}\n */\n\nexport function request(url, options = {}) {\n  const config = {\n    method: \"GET\",\n    ...options\n  };\n  const errors = [];\n\n  if (!url) {\n    errors.push(\"url\");\n  }\n\n  if (!config.payload && config.method !== \"GET\" && config.method !== \"DELETE\") {\n    errors.push(\"payload\");\n  }\n\n  if (errors.length) {\n    throw new Error(`Error! You must pass \\`${errors.join(\"`, `\")}\\``);\n  }\n\n  const headers = {\n    accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    ...config.headers\n  };\n  const requestConfig = {\n    headers,\n    url,\n    method: config.method,\n    timeout: 60000,\n    withCredentials: true\n  };\n\n  if (requestConfig.method !== \"GET\") {\n    requestConfig.data = JSON.stringify(config.payload);\n  }\n\n  return axios.request(requestConfig).then(async response => response.data).catch(async err => {\n    const {\n      response\n    } = err;\n    const error = new ServerError(response.statusText);\n    error.status = response.status;\n    error.response = await response.data;\n    throw error;\n  });\n}","map":{"version":3,"sources":["/Users/nhunam/Desktop/Java/remitano/remitano/video-sharing-react/src/utils/client.js"],"names":["axios","AxiosRequestConfig","ServerError","Error","constructor","message","captureStackTrace","name","parseError","error","request","url","options","config","method","errors","push","payload","length","join","headers","accept","requestConfig","timeout","withCredentials","data","JSON","stringify","then","response","catch","err","statusText","status"],"mappings":"AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,kBAAhB,QAA0C,OAA1C;AAEA,OAAO,MAAMC,WAAN,SAA0BC,KAA1B,CAAgC;AAGrCC,EAAAA,WAAW,CAACC,OAAD,EAA0B;AACnC,UAAMA,OAAN;AAEAF,IAAAA,KAAK,CAACG,iBAAN,CAAwB,IAAxB,EAA8BJ,WAA9B;AAEA,SAAKK,IAAL,GAAY,aAAZ;AAEA,WAAO,IAAP;AACD;;AAXoC;AAcvC,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2C;AAChD,SAAOA,KAAK,IAAI,sBAAhB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,OAAT,CAAiBC,GAAjB,EAA8BC,OAAe,GAAG,EAAhD,EAAgE;AACrE,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,KADK;AAEb,OAAGF;AAFU,GAAf;AAIA,QAAMG,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACJ,GAAL,EAAU;AACRI,IAAAA,MAAM,CAACC,IAAP,CAAY,KAAZ;AACD;;AAED,MACE,CAACH,MAAM,CAACI,OAAR,IACAJ,MAAM,CAACC,MAAP,KAAkB,KADlB,IAEAD,MAAM,CAACC,MAAP,KAAkB,QAHpB,EAIE;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAY,SAAZ;AACD;;AAED,MAAID,MAAM,CAACG,MAAX,EAAmB;AACjB,UAAM,IAAIf,KAAJ,CAAW,0BAAyBY,MAAM,CAACI,IAAP,CAAY,MAAZ,CAAoB,IAAxD,CAAN;AACD;;AAED,QAAMC,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,kBADM;AAEd,oBAAgB,kBAFF;AAGd,OAAGR,MAAM,CAACO;AAHI,GAAhB;AAKA,QAAME,aAAiC,GAAG;AACxCF,IAAAA,OADwC;AAExCT,IAAAA,GAFwC;AAGxCG,IAAAA,MAAM,EAAED,MAAM,CAACC,MAHyB;AAIxCS,IAAAA,OAAO,EAAE,KAJ+B;AAKxCC,IAAAA,eAAe,EAAE;AALuB,GAA1C;;AAQA,MAAIF,aAAa,CAACR,MAAd,KAAyB,KAA7B,EAAoC;AAClCQ,IAAAA,aAAa,CAACG,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAed,MAAM,CAACI,OAAtB,CAArB;AACD;;AACD,SAAOjB,KAAK,CACTU,OADI,CACIY,aADJ,EAEJM,IAFI,CAEC,MAAMC,QAAN,IAAkBA,QAAQ,CAACJ,IAF5B,EAGJK,KAHI,CAGE,MAAMC,GAAN,IAAa;AAClB,UAAM;AAAEF,MAAAA;AAAF,QAAeE,GAArB;AACA,UAAMtB,KAAa,GAAG,IAAIP,WAAJ,CAAgB2B,QAAQ,CAACG,UAAzB,CAAtB;AACAvB,IAAAA,KAAK,CAACwB,MAAN,GAAeJ,QAAQ,CAACI,MAAxB;AACAxB,IAAAA,KAAK,CAACoB,QAAN,GAAiB,MAAMA,QAAQ,CAACJ,IAAhC;AACA,UAAMhB,KAAN;AACD,GATI,CAAP;AAUD","sourcesContent":["// @flow\n/**\n * Client\n * @module Client\n */\nimport axios, { AxiosRequestConfig } from \"axios\";\n\nexport class ServerError extends Error {\n  response: Object;\n\n  constructor(message?: string): Error {\n    super(message);\n\n    Error.captureStackTrace(this, ServerError);\n\n    this.name = \"ServerError\";\n\n    return this;\n  }\n}\n\nexport function parseError(error: string): string {\n  return error || \"Something went wrong\";\n}\n\n/**\n * Fetch data\n *\n * @param {string} url\n * @param {Object} options\n * @param {string} [options.method] - Request method ( GET, POST, PUT, ... ).\n * @param {string} [options.payload] - Request body.\n * @param {Object} [options.headers]\n *\n * @returns {Promise}\n */\nexport function request(url: string, options: Object = {}): Promise<*> {\n  const config = {\n    method: \"GET\",\n    ...options\n  };\n  const errors = [];\n\n  if (!url) {\n    errors.push(\"url\");\n  }\n\n  if (\n    !config.payload &&\n    config.method !== \"GET\" &&\n    config.method !== \"DELETE\"\n  ) {\n    errors.push(\"payload\");\n  }\n\n  if (errors.length) {\n    throw new Error(`Error! You must pass \\`${errors.join(\"`, `\")}\\``);\n  }\n\n  const headers = {\n    accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    ...config.headers\n  };\n  const requestConfig: AxiosRequestConfig = {\n    headers,\n    url,\n    method: config.method,\n    timeout: 60000,\n    withCredentials: true\n  };\n\n  if (requestConfig.method !== \"GET\") {\n    requestConfig.data = JSON.stringify(config.payload);\n  }\n  return axios\n    .request(requestConfig)\n    .then(async response => response.data)\n    .catch(async err => {\n      const { response } = err;\n      const error: Object = new ServerError(response.statusText);\n      error.status = response.status;\n      error.response = await response.data;\n      throw error;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}