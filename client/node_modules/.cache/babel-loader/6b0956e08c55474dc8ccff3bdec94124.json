{"ast":null,"code":"import { ActionTypes as ActionAppTypes } from \"actions/app/type\";\nimport { ActionTypes as ActionUserTypes } from \"actions/user/type\";\nimport { ActionTypes as ActionVideoTypes } from \"actions/video/type\";\nimport { AppStatus } from \"configurations\";\nimport { handleActions } from \"redux-actions\";\nimport immutable from \"immutability-helper\";\nexport const appState = {\n  status: AppStatus.IDLE,\n  message: {\n    type: \"\",\n    content: \"\"\n  }\n};\nexport default {\n  app: handleActions({\n    [ActionUserTypes.USER_LOGIN]: state => immutable(state, {\n      status: {\n        $set: AppStatus.RUNNING\n      }\n    }),\n    [ActionAppTypes.CLEAR_MESSAGE]: state => immutable(state, {\n      status: {\n        $set: AppStatus.RUNNING\n      },\n      message: {\n        type: {\n          $set: \"\"\n        },\n        content: {\n          $set: \"\"\n        }\n      }\n    }),\n    [ActionUserTypes.USER_LOGIN_FAILURE]: state => immutable(state, {\n      status: {\n        $set: AppStatus.READY\n      },\n      message: {\n        type: {\n          $set: \"danger\"\n        },\n        content: {\n          $set: \"Login failed!\"\n        }\n      }\n    }),\n    [ActionUserTypes.USER_LOGIN_SUCCESS]: state => immutable(state, {\n      status: {\n        $set: AppStatus.READY\n      },\n      message: {\n        type: {\n          $set: \"\"\n        },\n        content: {\n          $set: \"\"\n        }\n      }\n    }),\n    [ActionVideoTypes.VIDEO_FETCH]: (state, {\n      payload\n    }) => immutable(state, {\n      message: {\n        type: {\n          $set: \"\"\n        },\n        content: {\n          $set: \"\"\n        }\n      }\n    }),\n    [ActionVideoTypes.VIDEO_SHARING]: state => immutable(state, {\n      status: {\n        $set: AppStatus.RUNNING\n      }\n    }),\n    [ActionVideoTypes.VIDEO_SHARING_SUCCESS]: (state, {\n      payload\n    }) => immutable(state, {\n      message: {\n        type: {\n          $set: \"success\"\n        },\n        content: {\n          $set: \"Your video has been shared!\"\n        }\n      },\n      status: {\n        $set: AppStatus.READY\n      }\n    }),\n    [ActionVideoTypes.VIDEO_SHARING_FAILURE]: (state, {\n      payload\n    }) => immutable(state, {\n      message: {\n        type: {\n          $set: \"danger\"\n        },\n        content: {\n          $set: \"There are some problem has been occured!\"\n        }\n      },\n      status: {\n        $set: AppStatus.READY\n      }\n    })\n  }, appState)\n};","map":{"version":3,"sources":["/Users/nhunam/Desktop/Java/remitano/remitano/video-sharing-react/src/reducers/app.js"],"names":["ActionTypes","ActionAppTypes","ActionUserTypes","ActionVideoTypes","AppStatus","handleActions","immutable","appState","status","IDLE","message","type","content","app","USER_LOGIN","state","$set","RUNNING","CLEAR_MESSAGE","USER_LOGIN_FAILURE","READY","USER_LOGIN_SUCCESS","VIDEO_FETCH","payload","VIDEO_SHARING","VIDEO_SHARING_SUCCESS","VIDEO_SHARING_FAILURE"],"mappings":"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","sourcesContent":["import { ActionTypes as ActionAppTypes } from \"actions/app/type\";\nimport { ActionTypes as ActionUserTypes } from \"actions/user/type\";\nimport { ActionTypes as ActionVideoTypes } from \"actions/video/type\";\nimport { AppStatus } from \"configurations\";\nimport { handleActions } from \"redux-actions\";\nimport immutable from \"immutability-helper\";\n\nexport const appState = {\n  status: AppStatus.IDLE,\n  message: {\n    type: \"\",\n    content: \"\"\n  }\n};\n\nexport default {\n  app: handleActions(\n    {\n      [ActionUserTypes.USER_LOGIN]: state =>\n        immutable(state, {\n          status: { $set: AppStatus.RUNNING }\n        }),\n      [ActionAppTypes.CLEAR_MESSAGE]: state =>\n        immutable(state, {\n          status: { $set: AppStatus.RUNNING },\n          message: {\n            type: { $set: \"\" },\n            content: { $set: \"\" }\n          }\n        }),\n      [ActionUserTypes.USER_LOGIN_FAILURE]: state =>\n        immutable(state, {\n          status: { $set: AppStatus.READY },\n          message: {\n            type: { $set: \"danger\" },\n            content: { $set: \"Login failed!\" }\n          }\n        }),\n      [ActionUserTypes.USER_LOGIN_SUCCESS]: state =>\n        immutable(state, {\n          status: { $set: AppStatus.READY },\n          message: {\n            type: { $set: \"\" },\n            content: { $set: \"\" }\n          }\n        }),\n      [ActionVideoTypes.VIDEO_FETCH]: (state, { payload }) =>\n        immutable(state, {\n          message: {\n            type: { $set: \"\" },\n            content: { $set: \"\" }\n          }\n        }),\n      [ActionVideoTypes.VIDEO_SHARING]: state =>\n        immutable(state, {\n          status: { $set: AppStatus.RUNNING }\n        }),\n      [ActionVideoTypes.VIDEO_SHARING_SUCCESS]: (state, { payload }) =>\n        immutable(state, {\n          message: {\n            type: { $set: \"success\" },\n            content: { $set: \"Your video has been shared!\" }\n          },\n          status: { $set: AppStatus.READY }\n        }),\n      [ActionVideoTypes.VIDEO_SHARING_FAILURE]: (state, { payload }) =>\n        immutable(state, {\n          message: {\n            type: { $set: \"danger\" },\n            content: { $set: \"There are some problem has been occured!\" }\n          },\n          status: { $set: AppStatus.READY }\n        })\n    },\n    appState\n  )\n};\n"]},"metadata":{},"sourceType":"module"}