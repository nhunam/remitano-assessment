{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nhunam/Desktop/Java/remitano/remitano/video-sharing-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetch),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(share),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(root);import{all,call,put,takeLatest}from\"redux-saga/effects\";import{ActionTypes}from\"actions/video/type\";import{AppConfig}from\"configurations\";import{parseYoutubeId}from\"utils/helpers\";import{request}from\"utils/client\";/**\n * Fetch Video\n */export function fetch(param){var payload,paramPayload,url,response;return _regeneratorRuntime.wrap(function fetch$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;payload={method:\"GET\"};paramPayload=param.payload;url=\"/videos?page_index=\".concat(paramPayload.page_index);_context.next=6;return call(request,url,payload);case 6:response=_context.sent;_context.next=9;return put({type:ActionTypes.VIDEO_FETCH_SUCCESS,payload:response});case 9:_context.next=15;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);_context.next=15;return put({type:ActionTypes.VIDEO_FETCH_FAILURE,payload:_context.t0});case 15:case\"end\":return _context.stop();}}},_marked,null,[[0,11]]);}/**\n * Fetch Video\n */export function share(param){var payload,videoUrl,userToken,youtubeAPIKey,youtubeAPIURL,requestPayload,videoId,url,response,items,snippet,title,description,sharingPayload,headers,requestSharingPayload;return _regeneratorRuntime.wrap(function share$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;payload=param.payload;videoUrl=payload.videoUrl,userToken=payload.userToken;youtubeAPIKey=AppConfig.youtubeAPIKey,youtubeAPIURL=AppConfig.youtubeAPIURL;requestPayload={method:\"GET\",withCredentials:true};videoId=parseYoutubeId(videoUrl);url=\"\".concat(youtubeAPIURL,\"?part=snippet&id=\").concat(videoId,\"&key=\").concat(youtubeAPIKey);console.log(url);_context2.next=10;return call(request,url,requestPayload);case 10:response=_context2.sent;console.log(response);items=response.items;snippet=items[0].snippet;title=snippet.title,description=snippet.description;sharingPayload={title:title,description:description,url:videoUrl};headers={Authorization:\"Bearer \".concat(userToken)};requestSharingPayload={method:\"POST\",payload:sharingPayload,headers:headers,withCredentials:true};_context2.next=20;return call(request,\"/videos\",requestSharingPayload);case 20:_context2.next=22;return put({type:ActionTypes.VIDEO_SHARING_SUCCESS});case 22:_context2.next=28;break;case 24:_context2.prev=24;_context2.t0=_context2[\"catch\"](0);_context2.next=28;return put({type:ActionTypes.VIDEO_SHARING_FAILURE,payload:_context2.t0});case 28:case\"end\":return _context2.stop();}}},_marked2,null,[[0,24]]);}/**\n * Video Sagas\n */export default function root(){return _regeneratorRuntime.wrap(function root$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([takeLatest(ActionTypes.VIDEO_FETCH,fetch)]);case 2:_context3.next=4;return all([takeLatest(ActionTypes.VIDEO_SHARING,share)]);case 4:case\"end\":return _context3.stop();}}},_marked3);}","map":{"version":3,"sources":["/Users/nhunam/Desktop/Java/remitano/remitano/video-sharing-react/src/sagas/video.js"],"names":["fetch","share","root","all","call","put","takeLatest","ActionTypes","AppConfig","parseYoutubeId","request","param","payload","method","paramPayload","url","page_index","response","type","VIDEO_FETCH_SUCCESS","VIDEO_FETCH_FAILURE","videoUrl","userToken","youtubeAPIKey","youtubeAPIURL","requestPayload","withCredentials","videoId","console","log","items","snippet","title","description","sharingPayload","headers","Authorization","requestSharingPayload","VIDEO_SHARING_SUCCESS","VIDEO_SHARING_FAILURE","VIDEO_FETCH","VIDEO_SHARING"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\n\nimport { ActionTypes } from \"actions/video/type\";\nimport { AppConfig } from \"configurations\";\nimport { parseYoutubeId } from \"utils/helpers\";\nimport { request } from \"utils/client\";\n\n/**\n * Fetch Video\n */\nexport function* fetch(param) {\n  try {\n    const payload = {\n      method: \"GET\"\n    };\n    const paramPayload = param.payload;\n    const url = `/videos?page_index=${paramPayload.page_index}`;\n    const response = yield call(request, url, payload);\n\n    yield put({\n      type: ActionTypes.VIDEO_FETCH_SUCCESS,\n      payload: response\n    });\n  } catch (err) {\n    /* istanbul ignore next */\n    yield put({\n      type: ActionTypes.VIDEO_FETCH_FAILURE,\n      payload: err\n    });\n  }\n}\n\n/**\n * Fetch Video\n */\nexport function* share(param) {\n  try {\n    const { payload } = param;\n    const { videoUrl, userToken } = payload;\n    const { youtubeAPIKey, youtubeAPIURL } = AppConfig;\n    const requestPayload = {\n      method: \"GET\",\n      withCredentials: true\n    };\n    const videoId = parseYoutubeId(videoUrl);\n\n    const url = `${youtubeAPIURL}?part=snippet&id=${videoId}&key=${youtubeAPIKey}`;\n    console.log(url);\n    const response = yield call(request, url, requestPayload);\n    console.log(response)\n    const { items } = response;\n    const { snippet } = items[0];\n    const { title, description } = snippet;\n\n    const sharingPayload = {\n      title: title,\n      description: description,\n      url: videoUrl\n    };\n    const headers = { Authorization: `Bearer ${userToken}` };\n    const requestSharingPayload = {\n      method: \"POST\",\n      payload: sharingPayload,\n      headers: headers,\n      withCredentials: true\n    };\n    yield call(request, \"/videos\", requestSharingPayload);\n\n    yield put({\n      type: ActionTypes.VIDEO_SHARING_SUCCESS\n    });\n  } catch (err) {\n    /* istanbul ignore next */\n    yield put({\n      type: ActionTypes.VIDEO_SHARING_FAILURE,\n      payload: err\n    });\n  }\n}\n\n/**\n * Video Sagas\n */\nexport default function* root() {\n  yield all([takeLatest(ActionTypes.VIDEO_FETCH, fetch)]);\n  yield all([takeLatest(ActionTypes.VIDEO_SHARING, share)]);\n}\n"]},"metadata":{},"sourceType":"module"}